/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a user-ownership model for personal data and allows public read access to therapist profiles and prompt suggestions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, only accessible by the user themselves.
 * - /users/{userId}/chats/{chatId}: Stores chat metadata, only accessible by the user themselves.
 * - /users/{userId}/chats/{chatId}/messages/{messageId}: Stores individual chat messages, only accessible by the user themselves.
 * - /promptSuggestions: Stores suggestions for starting conversations; publicly readable.
 * - /therapists/{therapistId}: Stores profiles of verified therapists; publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own data (profile, chats, messages).
 * - Therapists and prompt suggestions are publicly readable but only modifiable through backend processes (not directly by users).
 * - Listing of users is explicitly denied to prevent unauthorized enumeration.
 *
 * Denormalization for Authorization:
 *  - Each chat and message document is nested under a user's document, allowing the rules to verify ownership of the chat based on the path, without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for user 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Signed-in users only
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Explicitly prevent listing all users.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat metadata for a specific user.
     * @path /users/{userId}/chats/{chatId}
     * @allow (create) User with UID 'user123' can create a new chat.
     * @allow (get) User with UID 'user123' can read a specific chat.
     * @allow (update) User with UID 'user123' can update their chat metadata.
     * @allow (delete) User with UID 'user123' can delete their chat.
     * @deny (create) User with UID 'user456' cannot create a chat for user 'user123'.
     * @deny (get) User with UID 'user456' cannot read a chat belonging to user 'user123'.
     * @principle Enforces document ownership for all operations within a user's chats.
     */
    match /users/{userId}/chats/{chatId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to individual messages within a chat session.
     * @path /users/{userId}/chats/{chatId}/messages/{messageId}
     * @allow (create) User with UID 'user123' can create a new message in their chat.
     * @allow (get) User with UID 'user123' can read a message in their chat.
     * @allow (update) User with UID 'user123' can update a message in their chat.
     * @allow (delete) User with UID 'user123' can delete a message in their chat.
     * @deny (create) User with UID 'user456' cannot create a message in a chat belonging to user 'user123'.
     * @deny (get) User with UID 'user456' cannot read a message in a chat belonging to user 'user123'.
     * @principle Enforces document ownership for all operations within a user's chat messages.
     */
    match /users/{userId}/chats/{chatId}/messages/{messageId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to prompt suggestions. Write access should be managed via backend.
     * @path /promptSuggestions
     * @allow (get) Any user can read prompt suggestions.
     * @allow (list) Any user can list prompt suggestions.
     * @deny (create) No user can create prompt suggestions directly.
     * @deny (update) No user can update prompt suggestions directly.
     * @deny (delete) No user can delete prompt suggestions directly.
     * @principle Public read, backend-only writes.
     */
    match /promptSuggestions/{promptSuggestionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to therapist profiles. Write access should be managed via backend.
     * @path /therapists/{therapistId}
     * @allow (get) Any user can read therapist profiles.
     * @allow (list) Any user can list therapist profiles.
     * @deny (create) No user can create therapist profiles directly.
     * @deny (update) No user can update therapist profiles directly.
     * @deny (delete) No user can delete therapist profiles directly.
     * @principle Public read, backend-only writes.
     */
    match /therapists/{therapistId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of an existing resource.
  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}